using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEngine;

public class MapGeneration : MonoBehaviour
{
    public GameObject mapTile;

    [SerializeField] private int mapWidth;
    [SerializeField] private int mapHeight;
    private int loopCount;

    private List<GameObject> mapTiles = new List<GameObject>();
    private List<GameObject> pathTiles = new List<GameObject>();

    private GameObject currentTile; // Current tile we're on
    private GameObject finalTile; // Target end tile

    public Color pathColour;
    private bool reachedX;
    private bool reachedY;

    private void Start()
    {
        GenerateMap();
    }

    private List<GameObject> GetTopEdgeTiles()
    {
        List<GameObject> edgeTiles = new List<GameObject>();

        for (int i = mapWidth * (mapHeight - 1); i < mapWidth * mapHeight; i++)
        {
            edgeTiles.Add(mapTiles[i]);
        }

        return edgeTiles;
    }

    private List<GameObject> GetBottomEdgeTiles()
    {
        List<GameObject> edgeTiles = new List<GameObject>();

        for (int i = 0; i < mapWidth; i++)
        {
            edgeTiles.Add(mapTiles[i]);
        }

        return edgeTiles;
    }

    private void MoveDown()
    {
        pathTiles.Add(currentTile);
        int currentIndex = mapTiles.IndexOf(currentTile);
        currentTile = mapTiles[currentIndex - mapWidth];
    }

    private void MoveLeft()
    {
        pathTiles.Add(currentTile);
        int currentIndex = mapTiles.IndexOf(currentTile);
        currentTile = mapTiles[currentIndex - 1];
    }

    private void MoveRight()
    {
        pathTiles.Add(currentTile);
        int currentIndex = mapTiles.IndexOf(currentTile);
        currentTile = mapTiles[currentIndex + 1];
    }

    private void GenerateMap()
    {
        for (int y = 0; y < mapHeight; y++)
        {
            for (int x = 0; x < mapWidth; x++)
            {
                GameObject newTile = Instantiate(mapTile);
                mapTiles.Add(newTile);
                newTile.transform.position = new Vector2(x, y);
            }
        }

        List<GameObject> topEdgeTiles = GetTopEdgeTiles();
        List<GameObject> bottomEdgeTiles = GetBottomEdgeTiles();

        GameObject startTile = topEdgeTiles[Random.Range(0, mapWidth)];
        finalTile = bottomEdgeTiles[Random.Range(0, mapWidth)];
        currentTile = startTile;

        GeneratePath();

        pathTiles.Add(finalTile);

        foreach (GameObject obj in pathTiles)
        {
            obj.GetComponent<SpriteRenderer>().color = pathColour;
        }
    }

    private void GeneratePath()
    {
        while (reachedX == false)
        {
            loopCount++; 
            if (loopCount >= 100) // Error handling: If loops more than 100 times then break out.
            {
                Debug.Log("Broke out of while loop!");
                break;
            }
            if (currentTile.transform.position.x > finalTile.transform.position.x)
            {
                MoveLeft();
            }
            else if (currentTile.transform.position.x < finalTile.transform.position.x)
            {
                MoveRight();
            }
            else
            {
                reachedX = true;
            }
        }
        while (reachedY == false)
        {
            if (currentTile.transform.position.y > finalTile.transform.position.y)
            {
                MoveDown();
            }
            else
            {
                reachedY = true;
            }
        }

    }
}

 
